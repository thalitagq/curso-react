{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/thalita/curso-react/projeto-14/pages/[meetupId].js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://thalita:123123123@sandbox.eovzz.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetusCollection = db.collection(\"meetups\");\n  const meetups = await meetusCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n  const client = await MongoClient.connect(\"mongodb+srv://thalita:123123123@sandbox.eovzz.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/home/thalita/curso-react/projeto-14/pages/[meetupId].js"],"names":["MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","console","log","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetusCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","meetupsCollection","selectedMeetup","findOne","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,YAAP,MAAyB,oCAAzB;;AACA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACG,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEJ,KAAK,CAACG,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEL,KAAK,CAACG,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEN,KAAK,CAACG,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMb,WAAW,CAACc,OAAZ,CACnB,+FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AAEA,QAAMC,OAAO,GAAG,MAAMF,gBAAgB,CAACG,IAAjB,CAAsB,EAAtB,EAA0B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA1B,EAAsCC,OAAtC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACAvB,EAAAA,OAAO,CAACC,GAAR,CAAYsB,QAAZ;AAEA,QAAMf,MAAM,GAAG,MAAMb,WAAW,CAACc,OAAZ,CACnB,+FADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMiB,iBAAiB,GAAGjB,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMgB,cAAc,GAAG,MAAMD,iBAAiB,CAACE,OAAlB,CAA0B;AAACd,IAAAA,GAAG,EAAEnB,QAAQ,CAAC2B,QAAD;AAAd,GAA1B,CAA7B;AACAf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLlB,IAAAA,KAAK,EAAE;AACLG,MAAAA,UAAU,EAAE;AACV4B,QAAAA,EAAE,EAAEF,cAAc,CAACb;AADT;AADP;AADF,GAAP;AAOD;AAED,eAAejB,aAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../components/meetups/MeetupDetail\";\nfunction MeetupDetails(props) {\n  console.log(props);\n  return (\n    <MeetupDetail\n      image={props.meetupData.image}\n      title={props.meetupData.title}\n      address={props.meetupData.address}\n      description={props.meetupData.description}\n    />\n  );\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://thalita:123123123@sandbox.eovzz.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n\n  const meetusCollection = db.collection(\"meetups\");\n\n  const meetups = await meetusCollection.find({}, { _id: 1 }).toArray();\n  client.close()\n  \n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n  \n  const client = await MongoClient.connect(\n    \"mongodb+srv://thalita:123123123@sandbox.eovzz.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  \n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n  \n  const selectedMeetup = await meetupsCollection.findOne({_id: ObjectId(meetupId)})\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id\n      }\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}